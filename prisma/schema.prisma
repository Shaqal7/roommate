// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  topics   Topic[]
  messages Message[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Topic model
model Topic {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatrooms Chatroom[]
}

// Chatroom model
model Chatroom {
  id        String   @id @default(cuid())
  name      String
  aiModel   String // The AI model to use (e.g., "claude", "gpt-4")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topicId   String

  // Relations
  topic    Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  messages Message[]
}

// Message model
model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  isAi       Boolean  @default(false)
  createdAt  DateTime @default(now())
  chatroomId String
  userId     String?

  // Relations
  chatroom Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}
